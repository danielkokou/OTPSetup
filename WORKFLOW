This document explains the various messages that are sent through
AMPQ.

Routing key: transload
Parameters: {'transload': URL, 'gtfs_file_id' : integer}
Sent by: webapp
Handled by: transloader

This is sent when GTFS needs to be downloaded from a URL and loaded
into S3.  Sends validate_request.

Routing key: validate_request
Parameters: {'files' : [list of s3 keys], 'request_id' : integer}
Sent by: webapp, transloader
Handled by: checker

This causes the GTFS validator to validate the GTFS data.  Sends
validation_done.

Routing key: validation_done
Parameters: {'request_id' : integer, 'output' : [{'key': s3 id, 'errors' : text}, ...]})
Sent by: checker
Handled by: django_consumer

django_consumer updates the webapp database and sends out an email
to the admins requesting that the validated data be approved

Routing key: create_instance
Parameters: { 'files' : [list of s3 keys], 'request_id' : integer }
Sent by: webapp
Handled by: graph_builder

Routing key: graph_done
Parameters: { 'request_id' : integer, 'success' : boolean, 'key': s3 id, 'output' : text }
Sent by: graph_builder
Handled by: graph_consumer

graph_consumer does one of two things: if graph building was successful, it spins 
up a new deployment instance and dispatches a deploy_instance message. If graph
building failed, graph_consumer sends an email to the admins alerting of the failure

Routing key: deploy_instance
Parameters: { 'request_id' : integer, 'success' : boolean, 'key': s3 id, 'output' : text }
Sent by: graph_consumer
Handled by: deployer

deployer emails the admins upon successful deployment
